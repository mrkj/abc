# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyabc', [dirname(__file__)])
        except ImportError:
            import _pyabc
            return _pyabc
        if fp is not None:
            try:
                _mod = imp.load_module('_pyabc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyabc = swig_import_helper()
    del swig_import_helper
else:
    import _pyabc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def n_ands():
  return _pyabc.n_ands()
n_ands = _pyabc.n_ands

def n_pis():
  return _pyabc.n_pis()
n_pis = _pyabc.n_pis

def n_pos():
  return _pyabc.n_pos()
n_pos = _pyabc.n_pos

def n_latches():
  return _pyabc.n_latches()
n_latches = _pyabc.n_latches

def run_command(*args):
  return _pyabc.run_command(*args)
run_command = _pyabc.run_command

def has_comb_model():
  return _pyabc.has_comb_model()
has_comb_model = _pyabc.has_comb_model

def has_seq_model():
  return _pyabc.has_seq_model()
has_seq_model = _pyabc.has_seq_model

def n_bmc_frames():
  return _pyabc.n_bmc_frames()
n_bmc_frames = _pyabc.n_bmc_frames

def prob_status():
  return _pyabc.prob_status()
prob_status = _pyabc.prob_status

def is_valid_cex():
  return _pyabc.is_valid_cex()
is_valid_cex = _pyabc.is_valid_cex

def is_true_cex():
  return _pyabc.is_true_cex()
is_true_cex = _pyabc.is_true_cex

def n_cex_pis():
  return _pyabc.n_cex_pis()
n_cex_pis = _pyabc.n_cex_pis

def n_cex_regs():
  return _pyabc.n_cex_regs()
n_cex_regs = _pyabc.n_cex_regs

def cex_po():
  return _pyabc.cex_po()
cex_po = _pyabc.cex_po

def cex_frame():
  return _pyabc.cex_frame()
cex_frame = _pyabc.cex_frame


